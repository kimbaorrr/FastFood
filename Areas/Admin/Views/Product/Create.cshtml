@model NewProductPostViewModel

<!-- Start Container Fluid -->
<div class="container-xxl">
    @Html.AntiForgeryToken()
    @using (Html.BeginForm("Create", "Product", FormMethod.Post, new { area = "Admin", id = "productForm" }))
    {

        <div class="row">
            <div class="col-xl-3 col-lg-4">
                <div class="card mx-auto shadow-sm">
                    <img id="previewImage" src="https://static.vecteezy.com/system/resources/previews/004/141/669/non_2x/no-photo-or-blank-image-icon-loading-images-or-missing-image-mark-image-not-available-or-image-coming-soon-sign-simple-nature-silhouette-in-frame-isolated-illustration-vector.jpg" class="card-img-top" alt="Product Image">
                    <div class="card-body">
                        <h5 id="previewName" class="card-title text-primary fw-bold">Tên sản phẩm</h5>
                        <p id="previewDescription" class="card-text text-muted">Mô tả ngắn gọn về sản phẩm để thu hút người mua.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 id="previewOriginalPrice" class="text-decoration-line-through text-muted">Giá gốc: 0 VND</h6>
                            <span id="previewDiscount" class="badge bg-danger">0% OFF</span>
                        </div>
                        <h5 id="previewDiscountedPrice" class="text-danger fw-bold">Giá sau khuyến mãi: 0 VND</h5>
                    </div>
                </div>
                <div class="card mx-auto shadow-sm">
                    <div class="card-header">
                        <h4 class="card-title">Tải ảnh lên</h4>
                    </div>
                    <div class="card-body">
                        @Html.TextBoxFor(x=>x.ProductImages, new { @type = "file", @class = "form-control", @accept = "image/*", @required = "" }))
                    </div>

                </div>
            </div>

            <div class="col-xl-9 col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Thông tin sản phẩm</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-6">

                                <div class="mb-3">
                                    @Html.LabelFor(m => m.NewProduct.ProductName, new { @class = "form-label" }) <span class="text-red"> *</span>
                                    @Html.TextBoxFor(m => m.NewProduct.ProductName, new { @class = "form-control", @required = "" })
                                    @Html.ValidationMessageFor(m => m.NewProduct.ProductName, null, new { @class = "text-danger" })
                                </div>

                            </div>
                            <div class="col-lg-6">
                                @Html.LabelFor(m => m.NewProduct.CategoryId, new { @class = "form-label" }) <span class="text-red"> *</span>
                                @Html.DropDownListFor(m => m.NewProduct.CategoryId, Model.NewProduct.Categories, "Chọn danh mục", new
                                {
                                   @class = "form-control mt-1",
                                   @data_choices = "true",
                                   @data_choices_groups = "true",
                                   @data_placeholder = "Chọn danh mục",
                                   @required = ""
                                })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">

                                <div class="mb-3">
                                @Html.LabelFor(m => m.NewProduct.CreatedAt, new { @class = "form-label" })
                                @Html.TextBoxFor(m => m.NewProduct.CreatedAt, new { @class = "form-control", @readonly = "true" })
                                </div>

                            </div>
                            <div class="col-lg-4">

                                <div class="mb-3">
                                @Html.LabelFor(m => m.NewProduct.UpdatedAt, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.NewProduct.UpdatedAt, new { @class = "form-control", @readonly = "true" })
                                </div>

                            </div>
                            <div class="col-lg-4">
                                <div class="mb-3">
                                    @Html.LabelFor(m => m.NewProduct.CreatedBy, new { @class = "form-label" })
                                    @Html.TextBoxFor(m => m.NewProduct.CreatedBy, new { @class = "form-control", @readonly = "true" })
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="mb-3">
                                @Html.LabelFor(m => m.NewProduct.Summary, new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.NewProduct.Summary, new { @class = "form-control bg-light-subtle", @rows = "7" })
                                </div>
                                <div class="mb-3">
                                @Html.LabelFor(m => m.NewProduct.Content, new { @class = "form-label" })
                                @Html.TextAreaFor(m => m.NewProduct.Content, new { @class = "form-control bg-light-subtle", @rows = "7" })
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">Thông tin giá bán</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-4">

                                @Html.LabelFor(m => m.NewProduct.OriginalPrice, new { @class = "form-label" }) <span class="text-red"> *</span>
                                <div class="input-group mb-3">
                                    <span class="input-group-text fs-20"><i class='bx bx-dollar'></i></span>
                                    @Html.TextBoxFor(m => m.NewProduct.OriginalPrice, new { @class = "form-control", @required = "", @type = "number" })
                                </div>

                            </div>
                            <div class="col-lg-4">
                            @Html.LabelFor(m => m.NewProduct.Discount, new { @class = "form-label" }) <span class="text-red"> *</span>
                                <div class="input-group mb-3">
                                    <span class="input-group-text fs-20"><i class='bx bxs-discount'></i></span>
                                @Html.TextBoxFor(m => m.NewProduct.Discount, new { @class = "form-control", @required = "", @type = "number" })
                                </div>
                            </div>
                            <div class="col-lg-4">


                                @Html.LabelFor(x => x.NewProduct.FinalPrice, new { @class = "form-label" })
                                <div class="input-group mb-3">
                                    <span class="input-group-text fs-20"><i class='bx bxs-file-txt'></i></span>
                                @Html.TextBoxFor(m => m.NewProduct.FinalPrice, new { @class = "form-control", @readonly = "", @disabled = "", @type = "number" })
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title mb-0">Thông tin nguyên liệu</h4>
                    </div>
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="dropdown">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="ingredientDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    Chọn nguyên liệu
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="ingredientDropdown" id="ingredient-dropdown-menu">
                                </ul>
                            </div>
                        </div>
                        <ul class="list-group" id="selected-ingredients-list">
                        </ul>
                    </div>
                </div>
                <div class="bg-light mb-3 rounded p-3">
                    <div class="row justify-content-end g-2">
                        <div class="col-lg-2">
                            <button type="submit" class="btn btn-outline-secondary w-100">Xác nhận</button>
                        </div>
                        <div class="col-lg-2">
                            <button type="reset" class="btn btn-primary w-100">Hủy bỏ</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

</div>
<!-- End Container Fluid -->

<script>
        $(document).ready(() => {
        const $productName = $('#NewProduct_ProductName');
        const $summary = $('#NewProduct_Summary');
        const $originalPrice = $('#NewProduct_OriginalPrice');
        const $discount = $('#NewProduct_Discount');
        const $finalPrice = $('#NewProduct_FinalPrice');
        const $images = $('#ProductImages');

        const $previewImage = $('#previewImage');
        const $previewName = $('#previewName');
        const $previewDescription = $('#previewDescription');
        const $previewOriginalPrice = $('#previewOriginalPrice');
        const $previewDiscount = $('#previewDiscount');
        const $previewDiscountedPrice = $('#previewDiscountedPrice');

        const $ingredientDropdownMenu = $('#ingredient-dropdown-menu');
        const $selectedIngredientsList = $('#selected-ingredients-list');
        const unitList = ["cái"];

        function loadIngredients() {
            $.ajax({
                url: '@Url.Action("Get", "Ingredient", new { area = "Admin" })',
                method: 'GET',
                dataType: 'json',
                success: function (ingredients) {
                    $.each(ingredients, (_, ing) => {
                        const item = $(`
                            <li>
                                <a class="dropdown-item" href="#"
                                   data-ingredient-id="${ing.IngredientId}"
                                   data-ingredient-name="${ing.IngredientName}"
                                   data-ingredient-description="${ing.Description}">
                                    ${ing.IngredientName}
                                </a>
                            </li>
                        `);
                        $ingredientDropdownMenu.append(item);
                    });
                    updateDropdownState();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error('Error fetching ingredients:', textStatus, errorThrown);
                }
            });
        }

        function disableDropdownItem(id) {
            $ingredientDropdownMenu.find(`a[data-ingredient-id="${id}"]`).addClass('disabled').css('pointer-events', 'none');
        }

        function enableDropdownItem(id) {
            $ingredientDropdownMenu.find(`a[data-ingredient-id="${id}"]`).removeClass('disabled').css('pointer-events', 'auto');
        }

        function updateDropdownState() {
            $selectedIngredientsList.find('.list-group-item').each(function () {
                const id = $(this).attr('id').split('-')[1];
                disableDropdownItem(id);
            });
        }

        loadIngredients();

        $ingredientDropdownMenu.on('click', 'a', function (e) {
            e.preventDefault();
            const id = $(this).data('ingredient-id');
            const name = $(this).data('ingredient-name');
            const description = $(this).data('ingredient-description');

            if ($(`#ingredient-${id}`).length === 0) {
                const item = $(`
                    <li class="list-group-item d-flex justify-content-between align-items-center" id="ingredient-${id}">
                        <div>
                            <h5 class="mb-1">${name}</h5>
                            <p class="mb-1">${description}</p>
                        </div>
                        <div class="d-flex align-items-center">
                            <input type="text" class="form-control form-control-sm quantity me-2" value="1" placeholder="Quantity">
                            <select class="form-select form-select-sm unit me-2">${unitList.map(u => `<option value="${u}">${u}</option>`).join('')}</select>
                            <button class="btn btn-outline-danger btn-sm remove-btn">Remove</button>
                        </div>
                    </li>
                `);
                $selectedIngredientsList.append(item);
                disableDropdownItem(id);
            } else {
                alert("Ingredient already added.");
            }
        });

        $selectedIngredientsList.on('click', '.remove-btn', function () {
            const id = $(this).closest('.list-group-item').attr('id').split('-')[1];
            $(this).closest('.list-group-item').remove();
            enableDropdownItem(id);
            updateDropdownState();
        });

        function updatePreview() {
            const nameVal = $productName.val() || "Product Name";
            const summaryVal = $summary.val() || "Short description here...";
            const priceVal = parseFloat($originalPrice.val()) || 0;
            const discountVal = parseFloat($discount.val()) || 0;
            const discountedPrice = priceVal * (1 - discountVal / 100);

            $previewName.text(nameVal);
            $previewDescription.text(summaryVal);
            $previewOriginalPrice.text(`Giá gốc: ${priceVal.toLocaleString()} VND`);
            $previewDiscount.text(`Khuyến mãi: ${discountVal}%`);
            $previewDiscountedPrice.text(`Giá sau khuyến mãi: ${discountedPrice.toLocaleString()} VND`);

            $finalPrice.val(discountedPrice);

            if ($images[0].files && $images[0].files.length > 0) {
                const reader = new FileReader();
                reader.onload = e => $previewImage.attr('src', e.target.result);
                reader.readAsDataURL($images[0].files[0]);
            } else {
                $previewImage.attr('src', 'https://static.vecteezy.com/system/resources/previews/004/141/669/non_2x/no-photo-or-blank-image-icon-loading-images-or-missing-image-mark-image-not-available-or-image-coming-soon-sign-simple-nature-silhouette-in-frame-isolated-illustration-vector.jpg');
            }
        }

        $productName.add($summary).add($originalPrice).add($discount).add($images).on('input keyup change', updatePreview);

        $('#productForm').on('submit', function (e) {
            e.preventDefault();
            const formData = new FormData(this);

            $selectedIngredientsList.find('.list-group-item').each(function (index) {
                const id = $(this).attr('id').split('-')[1];
                const quantity = parseInt($(this).find('.quantity').val(), 10) || 0;
                const unit = $(this).find('.unit').val();
                formData.append(`Ingredients[${index}].Id`, id);
                formData.append(`Ingredients[${index}].Quantity`, quantity);
                formData.append(`Ingredients[${index}].Unit`, unit);
            });

            $.ajax({
                url: '@Url.Action("Create", "Product", new { area = "Admin" })',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'json',
                success: function (res) {
                    alertMessage(res.message, res.type);
                    if (res.success) setTimeout(() => location.reload(), 1500);
                },
                error: function (err) {
                    console.error('Submit error:', err);
                    alertMessage("Error submitting data!", "red");
                }
            });
        });

        updatePreview();
    });

</script>



